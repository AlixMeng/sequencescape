require 'rails_helper'

# Note: These tests JUST check the factory characteristic of layout
# templates. The actual layout of tags is carried out by the tag layouts themselves,
# and is tested there.
describe TagLayout do
  def generate_tag_layout(plate, tag_type = :tag)
    plate.wells.with_aliquots.each_with_object({}) do |w, h|
      h[w.map_description] = w.aliquots.map(&tag_type)
    end
  end

  let(:plate) { create :plate_with_untagged_wells, well_count: 16 }
  let(:tag_group) { create :tag_group, tag_count: tag_count }
  let(:tag2_group) { nil }
  let(:tag_count) { 16 }
  let(:user) { create :user }
  let(:initial_tag) { 0 }

  shared_examples 'a tag layout' do
    let(:expected_tags) do
      expected_tag_layout.transform_values do |map_ids|
        map_ids.map { |id| tag_group.tags.detect { |tag| tag.map_id == id } }
      end
    end
    it 'applies the expected layout' do
      expect(generate_tag_layout(plate)).to eq expected_tags
    end

    it 'updates the library_id of the wells' do
      plate.wells.with_aliquots.each do |well|
        expect(well.aliquots.first.library_id).to eq well.id
      end
    end
  end

  context 'substitutions' do
    let(:tag_layout) { create :tag_layout }
    it 'defaults to an empty hash' do
      expect(tag_layout.substitutions).to eq({})
    end
  end

  context 'layouts' do
    before do
      create(:tag_layout,
             plate: plate,
             user: user,
             tag_group: tag_group,
             tag2_group: tag2_group,
             walking_by: walking_by,
             direction: direction,
             initial_tag: initial_tag)
    end

    context 'by_column' do
      let(:direction) { 'column' }

      context 'manual by plate' do
        let(:walking_by) { 'manual by plate' }

        context 'with a full plate' do
          let(:expected_tag_layout) do
            { 'A1' => [1], 'B1' => [2], 'C1' => [3], 'D1' => [4], 'E1' => [5], 'F1' => [6], 'G1' => [7], 'H1' => [8] }
          end
          it_behaves_like 'a tag layout'
        end

        context 'with a partial plate' do
          setup do
            plate.wells.located_at('B1').first.aliquots.clear
          end
          let(:expected_tag_layout) do
            { 'A1' => [1], 'C1' => [3], 'D1' => [4], 'E1' => [5], 'F1' => [6], 'G1' => [7], 'H1' => [8] }
          end
          it_behaves_like 'a tag layout'
        end
      end

      context 'wells of plate' do
        let(:walking_by) { 'wells of plate' }

        context 'with a full plate' do
          let(:expected_tag_layout) do
            { 'A1' => [1], 'B1' => [2], 'C1' => [3], 'D1' => [4], 'E1' => [5], 'F1' => [6], 'G1' => [7], 'H1' => [8] }
          end
          it_behaves_like 'a tag layout'
        end

        context 'with a partial plate' do
          before { plate.wells.located_at('B1').first.aliquots.clear }

          let(:expected_tag_layout) do
            { 'A1' => [1], 'C1' => [3], 'D1' => [4], 'E1' => [5], 'F1' => [6], 'G1' => [7], 'H1' => [8] }
          end
          it_behaves_like 'a tag layout'
        end
      end

      context 'quadrants' do
        let(:walking_by) { 'quadrants' }

        context 'with a full plate' do
          let(:plate) { create :plate_with_untagged_wells, sample_count: 384, size: 384 }
          let(:tag_count) { 384 }
          let(:tag2_group) { create :tag_group, tag_count: tag_count }
          let(:expected_tag_layout) do
            {
              'A1' => [1], 'B1' => [1], 'C1' => [2], 'D1' => [2], 'E1' => [3], 'F1' => [3], 'G1' => [4], 'H1' => [4], 'I1' => [5], 'J1' => [5], 'K1' => [6], 'L1' => [6], 'M1' => [7], 'N1' => [7], 'O1' => [8], 'P1' => [8],
              'A2' => [1], 'B2' => [1], 'C2' => [2], 'D2' => [2], 'E2' => [3], 'F2' => [3], 'G2' => [4], 'H2' => [4], 'I2' => [5], 'J2' => [5], 'K2' => [6], 'L2' => [6], 'M2' => [7], 'N2' => [7], 'O2' => [8], 'P2' => [8],
              'A3' => [9], 'B3' => [9], 'C3' => [10], 'D3' => [10], 'E3' => [11], 'F3' => [11], 'G3' => [12], 'H3' => [12], 'I3' => [13], 'J3' => [13], 'K3' => [14], 'L3' => [14], 'M3' => [15], 'N3' => [15], 'O3' => [16], 'P3' => [16],
              'A4' => [9], 'B4' => [9], 'C4' => [10], 'D4' => [10], 'E4' => [11], 'F4' => [11], 'G4' => [12], 'H4' => [12], 'I4' => [13], 'J4' => [13], 'K4' => [14], 'L4' => [14], 'M4' => [15], 'N4' => [15], 'O4' => [16], 'P4' => [16],
              'A5' => [17], 'B5' => [17], 'C5' => [18], 'D5' => [18], 'E5' => [19], 'F5' => [19], 'G5' => [20], 'H5' => [20], 'I5' => [21], 'J5' => [21], 'K5' => [22], 'L5' => [22], 'M5' => [23], 'N5' => [23], 'O5' => [24], 'P5' => [24],
              'A6' => [17], 'B6' => [17], 'C6' => [18], 'D6' => [18], 'E6' => [19], 'F6' => [19], 'G6' => [20], 'H6' => [20], 'I6' => [21], 'J6' => [21], 'K6' => [22], 'L6' => [22], 'M6' => [23], 'N6' => [23], 'O6' => [24], 'P6' => [24],
              'A7' => [25], 'B7' => [25], 'C7' => [26], 'D7' => [26], 'E7' => [27], 'F7' => [27], 'G7' => [28], 'H7' => [28], 'I7' => [29], 'J7' => [29], 'K7' => [30], 'L7' => [30], 'M7' => [31], 'N7' => [31], 'O7' => [32], 'P7' => [32],
              'A8' => [25], 'B8' => [25], 'C8' => [26], 'D8' => [26], 'E8' => [27], 'F8' => [27], 'G8' => [28], 'H8' => [28], 'I8' => [29], 'J8' => [29], 'K8' => [30], 'L8' => [30], 'M8' => [31], 'N8' => [31], 'O8' => [32], 'P8' => [32],
              'A9' => [33], 'B9' => [33], 'C9' => [34], 'D9' => [34], 'E9' => [35], 'F9' => [35], 'G9' => [36], 'H9' => [36], 'I9' => [37], 'J9' => [37], 'K9' => [38], 'L9' => [38], 'M9' => [39], 'N9' => [39], 'O9' => [40], 'P9' => [40],
              'A10' => [33], 'B10' => [33], 'C10' => [34], 'D10' => [34], 'E10' => [35], 'F10' => [35], 'G10' => [36], 'H10' => [36], 'I10' => [37], 'J10' => [37], 'K10' => [38], 'L10' => [38], 'M10' => [39], 'N10' => [39], 'O10' => [40], 'P10' => [40],
              'A11' => [41], 'B11' => [41], 'C11' => [42], 'D11' => [42], 'E11' => [43], 'F11' => [43], 'G11' => [44], 'H11' => [44], 'I11' => [45], 'J11' => [45], 'K11' => [46], 'L11' => [46], 'M11' => [47], 'N11' => [47], 'O11' => [48], 'P11' => [48],
              'A12' => [41], 'B12' => [41], 'C12' => [42], 'D12' => [42], 'E12' => [43], 'F12' => [43], 'G12' => [44], 'H12' => [44], 'I12' => [45], 'J12' => [45], 'K12' => [46], 'L12' => [46], 'M12' => [47], 'N12' => [47], 'O12' => [48], 'P12' => [48],
              'A13' => [49], 'B13' => [49], 'C13' => [50], 'D13' => [50], 'E13' => [51], 'F13' => [51], 'G13' => [52], 'H13' => [52], 'I13' => [53], 'J13' => [53], 'K13' => [54], 'L13' => [54], 'M13' => [55], 'N13' => [55], 'O13' => [56], 'P13' => [56],
              'A14' => [49], 'B14' => [49], 'C14' => [50], 'D14' => [50], 'E14' => [51], 'F14' => [51], 'G14' => [52], 'H14' => [52], 'I14' => [53], 'J14' => [53], 'K14' => [54], 'L14' => [54], 'M14' => [55], 'N14' => [55], 'O14' => [56], 'P14' => [56],
              'A15' => [57], 'B15' => [57], 'C15' => [58], 'D15' => [58], 'E15' => [59], 'F15' => [59], 'G15' => [60], 'H15' => [60], 'I15' => [61], 'J15' => [61], 'K15' => [62], 'L15' => [62], 'M15' => [63], 'N15' => [63], 'O15' => [64], 'P15' => [64],
              'A16' => [57], 'B16' => [57], 'C16' => [58], 'D16' => [58], 'E16' => [59], 'F16' => [59], 'G16' => [60], 'H16' => [60], 'I16' => [61], 'J16' => [61], 'K16' => [62], 'L16' => [62], 'M16' => [63], 'N16' => [63], 'O16' => [64], 'P16' => [64],
              'A17' => [65], 'B17' => [65], 'C17' => [66], 'D17' => [66], 'E17' => [67], 'F17' => [67], 'G17' => [68], 'H17' => [68], 'I17' => [69], 'J17' => [69], 'K17' => [70], 'L17' => [70], 'M17' => [71], 'N17' => [71], 'O17' => [72], 'P17' => [72],
              'A18' => [65], 'B18' => [65], 'C18' => [66], 'D18' => [66], 'E18' => [67], 'F18' => [67], 'G18' => [68], 'H18' => [68], 'I18' => [69], 'J18' => [69], 'K18' => [70], 'L18' => [70], 'M18' => [71], 'N18' => [71], 'O18' => [72], 'P18' => [72],
              'A19' => [73], 'B19' => [73], 'C19' => [74], 'D19' => [74], 'E19' => [75], 'F19' => [75], 'G19' => [76], 'H19' => [76], 'I19' => [77], 'J19' => [77], 'K19' => [78], 'L19' => [78], 'M19' => [79], 'N19' => [79], 'O19' => [80], 'P19' => [80],
              'A20' => [73], 'B20' => [73], 'C20' => [74], 'D20' => [74], 'E20' => [75], 'F20' => [75], 'G20' => [76], 'H20' => [76], 'I20' => [77], 'J20' => [77], 'K20' => [78], 'L20' => [78], 'M20' => [79], 'N20' => [79], 'O20' => [80], 'P20' => [80],
              'A21' => [81], 'B21' => [81], 'C21' => [82], 'D21' => [82], 'E21' => [83], 'F21' => [83], 'G21' => [84], 'H21' => [84], 'I21' => [85], 'J21' => [85], 'K21' => [86], 'L21' => [86], 'M21' => [87], 'N21' => [87], 'O21' => [88], 'P21' => [88],
              'A22' => [81], 'B22' => [81], 'C22' => [82], 'D22' => [82], 'E22' => [83], 'F22' => [83], 'G22' => [84], 'H22' => [84], 'I22' => [85], 'J22' => [85], 'K22' => [86], 'L22' => [86], 'M22' => [87], 'N22' => [87], 'O22' => [88], 'P22' => [88],
              'A23' => [89], 'B23' => [89], 'C23' => [90], 'D23' => [90], 'E23' => [91], 'F23' => [91], 'G23' => [92], 'H23' => [92], 'I23' => [93], 'J23' => [93], 'K23' => [94], 'L23' => [94], 'M23' => [95], 'N23' => [95], 'O23' => [96], 'P23' => [96],
              'A24' => [89], 'B24' => [89], 'C24' => [90], 'D24' => [90], 'E24' => [91], 'F24' => [91], 'G24' => [92], 'H24' => [92], 'I24' => [93], 'J24' => [93], 'K24' => [94], 'L24' => [94], 'M24' => [95], 'N24' => [95], 'O24' => [96], 'P24' => [96]
            }
          end
          let(:expected_tag2_layout) do
            {
              'A1' => [1], 'B1' => [3], 'C1' => [1], 'D1' => [3], 'E1' => [1], 'F1' => [3], 'G1' => [1], 'H1' => [3], 'I1' => [1], 'J1' => [3], 'K1' => [1], 'L1' => [3], 'M1' => [1], 'N1' => [3], 'O1' => [1], 'P1' => [3],
              'A2' => [2], 'B2' => [4], 'C2' => [2], 'D2' => [4], 'E2' => [2], 'F2' => [4], 'G2' => [2], 'H2' => [4], 'I2' => [2], 'J2' => [4], 'K2' => [2], 'L2' => [4], 'M2' => [2], 'N2' => [4], 'O2' => [2], 'P2' => [4],
              'A3' => [1], 'B3' => [3], 'C3' => [1], 'D3' => [3], 'E3' => [1], 'F3' => [3], 'G3' => [1], 'H3' => [3], 'I3' => [1], 'J3' => [3], 'K3' => [1], 'L3' => [3], 'M3' => [1], 'N3' => [3], 'O3' => [1], 'P3' => [3],
              'A4' => [2], 'B4' => [4], 'C4' => [2], 'D4' => [4], 'E4' => [2], 'F4' => [4], 'G4' => [2], 'H4' => [4], 'I4' => [2], 'J4' => [4], 'K4' => [2], 'L4' => [4], 'M4' => [2], 'N4' => [4], 'O4' => [2], 'P4' => [4],
              'A5' => [1], 'B5' => [3], 'C5' => [1], 'D5' => [3], 'E5' => [1], 'F5' => [3], 'G5' => [1], 'H5' => [3], 'I5' => [1], 'J5' => [3], 'K5' => [1], 'L5' => [3], 'M5' => [1], 'N5' => [3], 'O5' => [1], 'P5' => [3],
              'A6' => [2], 'B6' => [4], 'C6' => [2], 'D6' => [4], 'E6' => [2], 'F6' => [4], 'G6' => [2], 'H6' => [4], 'I6' => [2], 'J6' => [4], 'K6' => [2], 'L6' => [4], 'M6' => [2], 'N6' => [4], 'O6' => [2], 'P6' => [4],
              'A7' => [1], 'B7' => [3], 'C7' => [1], 'D7' => [3], 'E7' => [1], 'F7' => [3], 'G7' => [1], 'H7' => [3], 'I7' => [1], 'J7' => [3], 'K7' => [1], 'L7' => [3], 'M7' => [1], 'N7' => [3], 'O7' => [1], 'P7' => [3],
              'A8' => [2], 'B8' => [4], 'C8' => [2], 'D8' => [4], 'E8' => [2], 'F8' => [4], 'G8' => [2], 'H8' => [4], 'I8' => [2], 'J8' => [4], 'K8' => [2], 'L8' => [4], 'M8' => [2], 'N8' => [4], 'O8' => [2], 'P8' => [4],
              'A9' => [1], 'B9' => [3], 'C9' => [1], 'D9' => [3], 'E9' => [1], 'F9' => [3], 'G9' => [1], 'H9' => [3], 'I9' => [1], 'J9' => [3], 'K9' => [1], 'L9' => [3], 'M9' => [1], 'N9' => [3], 'O9' => [1], 'P9' => [3],
              'A10' => [2], 'B10' => [4], 'C10' => [2], 'D10' => [4], 'E10' => [2], 'F10' => [4], 'G10' => [2], 'H10' => [4], 'I10' => [2], 'J10' => [4], 'K10' => [2], 'L10' => [4], 'M10' => [2], 'N10' => [4], 'O10' => [2], 'P10' => [4],
              'A11' => [1], 'B11' => [3], 'C11' => [1], 'D11' => [3], 'E11' => [1], 'F11' => [3], 'G11' => [1], 'H11' => [3], 'I11' => [1], 'J11' => [3], 'K11' => [1], 'L11' => [3], 'M11' => [1], 'N11' => [3], 'O11' => [1], 'P11' => [3],
              'A12' => [2], 'B12' => [4], 'C12' => [2], 'D12' => [4], 'E12' => [2], 'F12' => [4], 'G12' => [2], 'H12' => [4], 'I12' => [2], 'J12' => [4], 'K12' => [2], 'L12' => [4], 'M12' => [2], 'N12' => [4], 'O12' => [2], 'P12' => [4],
              'A13' => [1], 'B13' => [3], 'C13' => [1], 'D13' => [3], 'E13' => [1], 'F13' => [3], 'G13' => [1], 'H13' => [3], 'I13' => [1], 'J13' => [3], 'K13' => [1], 'L13' => [3], 'M13' => [1], 'N13' => [3], 'O13' => [1], 'P13' => [3],
              'A14' => [2], 'B14' => [4], 'C14' => [2], 'D14' => [4], 'E14' => [2], 'F14' => [4], 'G14' => [2], 'H14' => [4], 'I14' => [2], 'J14' => [4], 'K14' => [2], 'L14' => [4], 'M14' => [2], 'N14' => [4], 'O14' => [2], 'P14' => [4],
              'A15' => [1], 'B15' => [3], 'C15' => [1], 'D15' => [3], 'E15' => [1], 'F15' => [3], 'G15' => [1], 'H15' => [3], 'I15' => [1], 'J15' => [3], 'K15' => [1], 'L15' => [3], 'M15' => [1], 'N15' => [3], 'O15' => [1], 'P15' => [3],
              'A16' => [2], 'B16' => [4], 'C16' => [2], 'D16' => [4], 'E16' => [2], 'F16' => [4], 'G16' => [2], 'H16' => [4], 'I16' => [2], 'J16' => [4], 'K16' => [2], 'L16' => [4], 'M16' => [2], 'N16' => [4], 'O16' => [2], 'P16' => [4],
              'A17' => [1], 'B17' => [3], 'C17' => [1], 'D17' => [3], 'E17' => [1], 'F17' => [3], 'G17' => [1], 'H17' => [3], 'I17' => [1], 'J17' => [3], 'K17' => [1], 'L17' => [3], 'M17' => [1], 'N17' => [3], 'O17' => [1], 'P17' => [3],
              'A18' => [2], 'B18' => [4], 'C18' => [2], 'D18' => [4], 'E18' => [2], 'F18' => [4], 'G18' => [2], 'H18' => [4], 'I18' => [2], 'J18' => [4], 'K18' => [2], 'L18' => [4], 'M18' => [2], 'N18' => [4], 'O18' => [2], 'P18' => [4],
              'A19' => [1], 'B19' => [3], 'C19' => [1], 'D19' => [3], 'E19' => [1], 'F19' => [3], 'G19' => [1], 'H19' => [3], 'I19' => [1], 'J19' => [3], 'K19' => [1], 'L19' => [3], 'M19' => [1], 'N19' => [3], 'O19' => [1], 'P19' => [3],
              'A20' => [2], 'B20' => [4], 'C20' => [2], 'D20' => [4], 'E20' => [2], 'F20' => [4], 'G20' => [2], 'H20' => [4], 'I20' => [2], 'J20' => [4], 'K20' => [2], 'L20' => [4], 'M20' => [2], 'N20' => [4], 'O20' => [2], 'P20' => [4],
              'A21' => [1], 'B21' => [3], 'C21' => [1], 'D21' => [3], 'E21' => [1], 'F21' => [3], 'G21' => [1], 'H21' => [3], 'I21' => [1], 'J21' => [3], 'K21' => [1], 'L21' => [3], 'M21' => [1], 'N21' => [3], 'O21' => [1], 'P21' => [3],
              'A22' => [2], 'B22' => [4], 'C22' => [2], 'D22' => [4], 'E22' => [2], 'F22' => [4], 'G22' => [2], 'H22' => [4], 'I22' => [2], 'J22' => [4], 'K22' => [2], 'L22' => [4], 'M22' => [2], 'N22' => [4], 'O22' => [2], 'P22' => [4],
              'A23' => [1], 'B23' => [3], 'C23' => [1], 'D23' => [3], 'E23' => [1], 'F23' => [3], 'G23' => [1], 'H23' => [3], 'I23' => [1], 'J23' => [3], 'K23' => [1], 'L23' => [3], 'M23' => [1], 'N23' => [3], 'O23' => [1], 'P23' => [3],
              'A24' => [2], 'B24' => [4], 'C24' => [2], 'D24' => [4], 'E24' => [2], 'F24' => [4], 'G24' => [2], 'H24' => [4], 'I24' => [2], 'J24' => [4], 'K24' => [2], 'L24' => [4], 'M24' => [2], 'N24' => [4], 'O24' => [2], 'P24' => [4]
            }
          end
          it_behaves_like 'a tag layout'
          let(:expected_tag2s) do
            # We use the same tag indicies, just from a different tag group
            expected_tag2_layout.transform_values do |map_ids|
              map_ids.map { |id| tag2_group.tags.detect { |tag| tag.map_id == id } }
            end
          end
          it 'applies the expected tag2 layout' do
            expect(generate_tag_layout(plate, :tag2)).to eq expected_tag2s
          end
        end
      end

      context 'grouped by plate' do
        let(:walking_by) { 'as group by plate' }
        let(:tag_count) { 32 }

        context 'with no offset' do
          let(:expected_tag_layout) do
            { 'A1' => [1, 2, 3, 4], 'B1' => [5, 6, 7, 8], 'C1' => [9, 10, 11, 12], 'D1' => [13, 14, 15, 16], 'E1' => [17, 18, 19, 20], 'F1' => [21, 22, 23, 24], 'G1' => [25, 26, 27, 28], 'H1' => [29, 30, 31, 32] }
          end
          it_behaves_like 'a tag layout'
        end

        context 'with an initial_tag' do
          let(:initial_tag) { 4 }

          let(:expected_tag_layout) do
            { 'H1' => [1, 2, 3, 4], 'A1' => [5, 6, 7, 8], 'B1' => [9, 10, 11, 12], 'C1' => [13, 14, 15, 16], 'D1' => [17, 18, 19, 20], 'E1' => [21, 22, 23, 24], 'F1' => [25, 26, 27, 28], 'G1' => [29, 30, 31, 32] }
          end
          it_behaves_like 'a tag layout'
        end
      end
    end

    context 'inverted layout' do
      let(:direction) { 'inverse column' }
      let(:walking_by) { 'wells of plate' }
      let(:expected_tag_layout) do
        { 'A1' => [8], 'B1' => [7], 'C1' => [6], 'D1' => [5], 'E1' => [4], 'F1' => [3], 'G1' => [2], 'H1' => [1] }
      end
      it_behaves_like 'a tag layout'
    end

    context 'with a tag2 group' do
      let(:tag2_group) { create :tag_group, tag_count: tag_count }
      let(:walking_by) { 'wells of plate' }
      let(:direction) { 'column' }
      let(:expected_tag_layout) do
        { 'A1' => [1], 'B1' => [2], 'C1' => [3], 'D1' => [4], 'E1' => [5], 'F1' => [6], 'G1' => [7], 'H1' => [8] }
      end
      let(:expected_tag2s) do
        # We use the same tag indicies, just from a different tag group
        expected_tag_layout.transform_values do |map_ids|
          map_ids.map { |id| tag2_group.tags.detect { |tag| tag.map_id == id } }
        end
      end
      it 'applies the expected tag2 layout' do
        expect(generate_tag_layout(plate, :tag2)).to eq expected_tag2s
      end
    end
  end
end
