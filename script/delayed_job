#!/bin/bash -l
function delayed_job_start() {
  echo 'Starting...'
  if [ ! -f tmp/pids/delayed_job.${1}.stop ]
  then
    touch tmp/pids/delayed_job.${1}.stop
    bundle exec rails runner 'Delayed::Worker.new.start' & > /dev/null
    echo $! > tmp/pids/delayed_job.${1}.pid
    echo "Running!"
  else
    echo "Worker already running with pid:"
    echo `cat tmp/pids/delayed_job.${1}.pid`
  fi
}

function check_stopped() {
  if [ -f tmp/pids/delayed_job.${1}.pid ] && ps -p `cat tmp/pids/delayed_job.${1}.pid` >> /dev/null ; then
    echo '.'
  else
    echo 'Delayed Job stopped'
    if [ -f tmp/pids/delayed_job.${1}.stop ]; then rm tmp/pids/delayed_job.${1}.stop; fi
    exit 0
  fi
}

function delayed_job_stop() {
  kill `cat tmp/pids/delayed_job.${1}.pid`
  echo 'Waiting for process to die'
  for ((i = 0; i < 60; i = i + 1)); do
    check_stopped ${1}
    sleep 1
  done
  echo 'Delayed Job failed to die, killing it...'
  kill -9 `cat tmp/pids/delayed_job.${1}.pid`
  if [ -f tmp/pids/delayed_job.${1}.stop ]; then rm tmp/pids/delayed_job.${1}.stop; fi
}

function delayed_job_restart() {
  delayed_job_stop
  delayed_job_start
}

delayed_job_${3} $2

# #!/usr/bin/env ruby

# require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))
# require 'delayed/command'
# Delayed::Command.new(ARGV).daemonize
