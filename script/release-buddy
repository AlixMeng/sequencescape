#!/bin/bash -e
#
# Performs testing of each individual branch, then merges all the branches that passed into the
# release branch, then performs a full production database run, including tests, before pushing the
# release branch to origin.  Should anything fail this script will exit immediately.
#
# You are advised to rebase all of the branches to be merged onto the release branch to reduce the
# chances of conflicts on the merge.
#
# These are the global variables that need to be set in order to run this script:
#
#   RELEASE                 => the release version number (like "4.25")
#   DATABASE_DUMP_DATE      => numeric date (YYYY-MM-DD) of the DB dump to use
#   DATABASE_DUMP_DIRECTORY => absolute path to the directory containing the DB dump files
#   DATABASE_NAME           => name of the development database to use
#
# The DB dump files are assumed to match:
#
#   ${DATABASE_DUMP_DIRECTORY}/${DATABASE_DUMP_DATE}-production-partial-schema.sql.bz2
#   ${DATABASE_DUMP_DIRECTORY}/${DATABASE_DUMP_DATE}-production-partial-data.sql.bz2
#

# RELEASE variable is '4.27' (i.e. dot is replaced by underscore).
RELEASE="4.27"
RELEASE_BRANCH="next_release"
DATABASE_DUMP_DATE="2011-01-18"
DATABASE_DUMP_DIRECTORY=`pwd`/../sequencescape-database-backups
DATABASE_NAME="sequencescape_development_next_release_${RELEASE/./_}"
DATABASE_CONTENT_SIZE="partial"       # Full is an option if you really want to lose days ...

# There are several input files that must exist:
#
#   release_branches => contains each branch that is intended to be part of the release (one per line)
#   branches_to_merge => are branches that have passed their tests and are ready to merge
#   branches_merged_into_release => branches that have been merged into the release branch
#
# Note that the latter two files are maintained by this script and you should only need to create
# the 'release_branches' file.  Do not remove the latter two files until after the release has been
# made as they are used to determine what new branches added to 'release_branches' need to be merged
# into the release branch.
touch release_branches
touch branches_to_merge
touch branches_merged_into_release

# Database helper functions ...
function empty_database() {
  echo "DROP DATABASE ${DATABASE_NAME}; CREATE DATABASE ${DATABASE_NAME};" | mysql -u root 
}
function blank_database() {
  echo -e "\tBuilding bare database ..."
  empty_database
  rake db:schema:load db:migrate
}
function migrate_database() {
  echo -e "\tMigrating database ..."
  rake db:migrate
}
function full_database() {
  echo -e "\tBuilding production database ..."
  DB_PATH="${DATABASE_DUMP_DIRECTORY}/${DATABASE_DUMP_DATE}-production-${DATABASE_CONTENT_SIZE}"
  DB_FILES=(${DB_PATH}-schema.sql.bz2 ${DB_PATH}-data.sql.bz2)
  
  empty_database
  bzcat ${DB_FILES[@]} | mysql -u root ${DATABASE_NAME}
}

# Git helper functions ...
function commit_schema_if_changed() {
  GIT_STATUS=`git status -u no --short`
  if [[ -n "${GIT_STATUS}" ]] ; then
    git add db/schema.rb
    git commit -m "Automatic schema commit during release building for ${RELEASE}" db/schema.rb
  fi
}

# Testing helper functions ...
function test_everything_except_random_failures() {
  echo -e "\tRunning tests and features (except '@known_to_fail_randomly') ..."
  rake test
  rake db:test:prepare
  bundle exec cucumber --tags '~@known_to_fail_randomly'
}
function test_everything() {
  echo -e "\tRunning tests and features ..."
  rake test 
  rake db:test:prepare
  bundle exec cucumber
}

# Determine if any of the branches due to go into the release have already been run and marked for
# merging.  If so we can remove them
RELEASE_BRANCHES=($(cat release_branches))
MERGE_READY_BRANCHES=($(cat branches_to_merge))
MERGED_BRANCHES=($(cat branches_merged_into_release))

if [[ ${#RELEASE_BRANCHES[@]} -eq 0 ]]; then
  echo -e "There are no branches to be merged into this release!"
  echo -e "Stopping now before something bad happens!"
  echo
  echo -e "You may want to fill a 'release_branches' file with the branches you actually want to"
  echo -e "merge into ${RELEASE_BRANCH}."
  exit 1
fi

BRANCHES=()
for branch in ${RELEASE_BRANCHES[@]} ; do
  skip=
  for j in ${MERGE_READY_BRANCHES[@]} ; do
    [[ $branch == $j ]] && { skip=1; break; }
  done
  for j in ${MERGED_BRANCHES[@]} ; do
    [[ $branch == $j ]] && { skip=1; break; }
  done
  [[ -n $skip ]] || BRANCHES+=(${branch})
done

clear

# Check that each of the branches that are to be merged seem to behave appropriately on their own
# branch.  This is done with a bare database to save some time.
if [[ ${#BRANCHES[@]} -gt 0 ]] ; then
  echo -e "Running tests and features on individual branches ..."
  for branch in ${BRANCHES[@]} ; do
    echo -e "\tProcessing branch ${branch} ..."

    # Create a database that has the previous release schema
    git checkout ${RELEASE_BRANCH}
    blank_database

    # Checkout our branch and migrate the database.  If this alters the db/schema.rb file then
    # we know we must commit that change to our branch before proceeding (it may be that a merge
    # or rebase has caused an incorrect db/schema.rb file on the branch before now)
    git checkout $branch
    migrate_database
    commit_schema_if_changed

    # Now we can test everything
    test_everything_except_random_failures
    echo $branch >> branches_to_merge
  done
fi

# Reload the merge branches because these may well have changed and then remove any that appear to
# have been merged into the release already.
MERGE_READY_BRANCHES=($(cat branches_to_merge))
MERGE_BRANCHES=()
for branch in ${MERGE_READY_BRANCHES[@]} ; do
  skip=
  for j in ${MERGED_BRANCHES[@]} ; do
    [[ $branch == $j ]] && { skip=1; break; }
  done
  [[ -n $skip ]] || MERGE_BRANCHES+=(${branch})
done

# Any branches that have passed their tests on their own branch can now be merged into the release
# branch, then the entire code base can be run against a bare database to ensure that it's still
# functioning.
if [[ ${#MERGE_BRANCHES[@]} -gt 0 ]] ; then
  echo -e "Branches to merge: ${MERGE_BRANCHES[@]}"
  echo -e "Merging feature branches into ${RELEASE_BRANCH} ..."
  git checkout ${RELEASE_BRANCH}
  for branch in ${MERGE_BRANCHES[@]} ; do
    echo -e "\t${branch} ..."
    git merge --no-ff ${branch}
    echo $branch >> branches_merged_into_release
  done
fi

echo -e "Checking that the merge is working ..."
blank_database
test_everything

# Finally we build a production database and run the release branch migrations to check that it's
# all behaving, before pushing the merged release branch to origin.
echo -e "Everything has been merged, proceeding with full test ..."
full_database
migrate_database
commit_schema_if_changed

git push origin ${RELEASE_BRANCH}

echo -e "Release ${RELEASE} pushed and ready for deployment"

#
# THINGS TO DO:
# - don't fail completely if a branch fails, just report it and *don't do any merges*
# - merge in a shell that will, once you exit it, return to this script
# - create the release branch from the previous version if it doesn't exist
# - tag the root of the release branch so that rebasing is done against that, rather than the head
# - redirect all output to a log file for each branch, reduces the output confusion
# - provide a 'git rebase --onto' facility with a push at the end
# - parallelise some of the branch testing
#
